#
import numpy as np
import random as rd
import matplotlib.pyplot as plt
%matplotlib inline
np.seterr(divide='ignore', invalid='ignore')

nummodels = 11
def pr(nummodels):
	priors = []
	x = 1
  for x in range(nummodels):
		priors = priors + [1/nummodels]
	return priors
    
def mod(nummodels):
	models = []
  for x in range(nummodels):
		models = models + [x/(nummodels-1)]
	return models
    
priors = np.array(pr(nummodels))
models = np.array(mod(nummodels))
oppmodels = 1-models

actprob = 0.3
def hort(x,actprob):
	if x < actprob:
		return "heads"
 	else:
		return "tails"
        
def randomlist(n):
	x = 1
	lst = []
	for x in range(n):
		lst = lst + [rd.random()]
  lst = np.array(lst)
  return lst
    
def mc(n):
	rows,cols = (n+1,nummodels)
	arr = [[0 for i in range (cols)] for j in range(rows)]
	arr[0] = priors
	rl = randomlist(n)
	k = 1
	while k <= n:
		if hort(rl[k-1],actprob) == "heads":
			arr[k] = np.multiply(arr[k-1],models)/np.dot(arr[k-1],models)
		else:
			arr[k] = np.multiply(arr[k-1],oppmodels)/(1-np.dot(arr[k-1],models))
		k = k+1
	return arr[n]
    
def bestmods(n):
	result = mc(n)
	index = np.array(np.where(result == np.amax(result)))
	index = index * 1/(nummodels-1)
	if len(index) == 1:
		index = index[0][0]
	return (index,np.amax(result))
    
def graphit(n):
	xaxis = [i for i in range(n)]
	yaxis = [mc(j)[int(actprob*(nummodels-1))] for j in range(n)]
	plt.plot(xaxis,yaxis)
	plt.show()
